{
  "name": "RFx - Collection",
  "nodes": [
    {
      "parameters": {
        "path": "rfx",
        "options": {
          "responseMode": "lastNode",
          "methods": [
            "GET",
            "POST"
          ]
        }
      },
      "id": "HttpTrigger",
      "name": "HTTP Trigger",
      "type": "n8n-nodes-base.httpTrigger",
      "typeVersion": 1,
      "position": [
        200,
        320
      ]
    },
    {
      "parameters": {
        "functionCode": "const { authMiddleware } = require('../functions/authMiddleware.js');\nreturn authMiddleware(items);"
      },
      "id": "AuthMiddleware",
      "name": "Auth Middleware",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        320
      ]
    },
    {
      "parameters": {
        "functionCode": "const method = $json.request.method;\nreturn [{ json: { method } }];"
      },
      "id": "ExtractMethod",
      "name": "Extract Method",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        640,
        320
      ]
    },
    {
      "parameters": {
        "propertyName": "method",
        "rules": [
          {
            "operation": "equal",
            "value": "GET"
          }
        ]
      },
      "id": "Router",
      "name": "Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        860,
        320
      ]
    },
    {
      "parameters": {
        "functionCode": "const auth = $json.$auth;\nconst query = $json.request.query || {};\nconst allowed = auth.permissions.includes('*') || auth.permissions.includes('rfx.view_all') || auth.permissions.includes('rfx.view_own');\nif (!allowed) { throw new Error('Forbidden'); }\nconst page = Number(query.page) || 1;\nconst limit = Math.min(Number(query.limit) || 50, 100);\nconst offset = (page - 1) * limit;\nconst status = query.status;\nconst owner = query.owner_id === 'me' ? auth.user_id : Number(query.owner_id);\nconst clauses = ['r.deleted_at IS NULL'];\nconst params = [];\nif (status) { clauses.push('r.status = :status'); params.push({ name: 'status', value: status }); }\nif (owner) { clauses.push('r.owner_user_id = :owner'); params.push({ name: 'owner', value: owner }); }\nif (!auth.permissions.includes('rfx.view_all') && !auth.permissions.includes('*')) {\n  clauses.push('r.owner_user_id = :auth_owner');\n  params.push({ name: 'auth_owner', value: auth.user_id });\n}\nreturn [{ json: { page, limit, offset, where: clauses.join(' AND '), params } }];"
      },
      "id": "PrepareList",
      "name": "Prepare List",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1080,
        220
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT SQL_CALC_FOUND_ROWS r.* FROM rfx r WHERE {{ $json.where }} ORDER BY r.due_at ASC LIMIT :limit OFFSET :offset",
        "values": {
          "number": [
            {
              "name": "limit",
              "value": "={{$json.limit}}"
            },
            {
              "name": "offset",
              "value": "={{$json.offset}}"
            }
          ],
          "string": "={{$json.params}}"
        }
      },
      "id": "ListQuery",
      "name": "List Query",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1300,
        220
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT FOUND_ROWS() as total"
      },
      "id": "TotalQuery",
      "name": "Total Query",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1520,
        220
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { data: items[0].json, total: items[1].json[0].total, page: $json.page, limit: $json.limit } }];"
      },
      "id": "RespondList",
      "name": "Respond List",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1740,
        220
      ]
    },
    {
      "parameters": {
        "functionCode": "const auth = $json.$auth;\nif (!auth.permissions.includes('*') && !auth.permissions.includes('rfx.create')) { throw new Error('Forbidden'); }\nconst body = $json.body || {};\nconst required = ['org_id','type','title'];\nfor (const field of required) { if (!body[field]) throw new Error(`Missing ${field}`); }\nreturn [{ json: body }];"
      },
      "id": "ValidateCreate",
      "name": "Validate Create",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1080,
        440
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO rfx (org_id, type, title, status, due_at, owner_user_id, notes) VALUES (:org_id, :type, :title, :status, :due_at, :owner_user_id, :notes)"
      },
      "id": "Insert",
      "name": "Insert",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1300,
        440
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM rfx WHERE id = LAST_INSERT_ID()"
      },
      "id": "FetchInserted",
      "name": "Fetch Inserted",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1520,
        440
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO audit_log (user_id, entity, entity_id, action, delta_json) VALUES (:user_id, 'rfx', :entity_id, 'create', JSON_OBJECT('title', :title, 'org_id', :org_id))",
        "values": {
          "string": [
            {
              "name": "user_id",
              "value": "={{$json.$auth.user_id}}"
            },
            {
              "name": "entity_id",
              "value": "={{$json[0].id}}"
            },
            {
              "name": "title",
              "value": "={{$json[0].title}}"
            },
            {
              "name": "org_id",
              "value": "={{$json[0].org_id}}"
            }
          ]
        }
      },
      "id": "Audit",
      "name": "Audit",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        1740,
        440
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{ json: items[0].json[0], statusCode: 201 }];"
      },
      "id": "RespondCreate",
      "name": "Respond Create",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1960,
        440
      ]
    }
  ],
  "connections": {
    "HTTP Trigger": {
      "main": [
        [
          {
            "node": "Auth Middleware",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Middleware": {
      "main": [
        [
          {
            "node": "Extract Method",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Method": {
      "main": [
        [
          {
            "node": "Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Router": {
      "main": [
        [
          {
            "node": "Prepare List",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validate Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare List": {
      "main": [
        [
          {
            "node": "List Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Query": {
      "main": [
        [
          {
            "node": "Total Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Total Query": {
      "main": [
        [
          {
            "node": "Respond List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Create": {
      "main": [
        [
          {
            "node": "Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert": {
      "main": [
        [
          {
            "node": "Fetch Inserted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Inserted": {
      "main": [
        [
          {
            "node": "Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audit": {
      "main": [
        [
          {
            "node": "Respond Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "pinData": {},
  "staticData": null,
  "id": "rfxCollection",
  "active": false,
  "tags": [],
  "meta": {
    "instanceId": "dealflow-docker"
  },
  "versionId": "bebf8599-27a7-4224-88d5-269b9a9a2856"
}
